INTERFACE STANDARDS

Today we want to support as many apps as possible. Apps want to run as many platforms as possible. Thus we need a standard.

Standards must go under review by professionals. They must be platform neutral, not favoring any. They must be clear on what they can do and how to be tested. Platforms can compete in other areas while sharing these standards.
But what if we find a better standard in the future? That's a tricky question.

Interface - Design
Implementation - Behavior

Proprietary vs Open
	Proprietary - owned by a single organization
	Open - everybody contributes

	Give up competitive advantage and have reduced freedom for reduced costs and a better chance of the product being adopted?

Application Programming Interface (API)
	List of routines and parameters and options
	Discusses how they're used, their return values, errors
	Used at a programming level (C, C++, Java, etc.)

	If we fit the API, we can use it, regardless of implementation.

Application Binary Interface (ABI)
	Most people don't know how to compile then run. But once compiled, it will only run on one ISA.
	ABI binds API to ISA. It has machine language instructions.
	If an application supports an API, but is compiled w/ an ABI compliant tool, the application can run anywhere that supports the ABI.
	Most programmers never directly deal with ABI. It's mostly used by compilers, linkers, loaders, and OS.