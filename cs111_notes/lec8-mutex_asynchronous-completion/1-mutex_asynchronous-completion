MUTUAL EXCLUSION AND ASYNCHRONOUS COMPLETION

Mutual Exclusion
	We want mutual exclusion to critical states.
	We want atomicity-either all or none of it happens.

	We can either perform all operations in one atomic instruction, or perform locks in atomic instructions.

Locks
	A thread can access the critical section if it has a lock.

	If a thread does not have a lock, it could spin wait, looping until a lock becomes available.
	Simple to program and it works.
	But wasteful of CPU cycles.

	Locks/Unlocks are performed atomically via special hardware, using test-and-set, compare-and-swap...

Asynchronous Completion
	How to wait without killing performance?

	Spinning could work if waiting is short/rare, outweighing an expensive sleep/wakeup.
	We could yield and spin, doing a context switch after spinning for a set amount of time, but anytime spent spinning is still a waste.

Condition Variables
	Create a synchronization object associated with an event

	Blocks threads that hold it by putting them to sleep.
	Threads that finish an event can signal to wake up threads.

	Who to wake up in the waiting list?
		Everyone? FIFO? Priority?

	Sleeping/Waking Up also has critical sections that need locks.
	Thread A might go to sleep while Thread B is using the resource.
	Thread B better not call wakeup when Thread A is in the middle of going to sleep.