THE PROCESS

A process is a running program.
We want to give the illusion we have infinite CPUs.
	"time sharing" - One process uses the CPU, quickly switch over and over again. Space sharing would be dividing up the CPU among processes

"mechanisms" are low level methods that implement functionality.
"policies" are algorithms the OS uses for decisions. A scheduling policy is an example.
"modularity" is separating policy (what) from mechanism (how)

"machine state" is what a program can read/write to.
"address space" is the memory the program can access.
"program counter" (PC), also called the "instruction pointer" (IP) is a register which tells us which instruction is being executed.

What to include in a process API
	-creating the process
	-destroying the process
	-waiting for a process to end
	-how to get the status of a process

How to make a process?
	load the code into memory
	It is usually stored in an executable format on a disk.
	In the early days, a process was loaded "eagerly", all at once
	Now, we load it "lazily", loading a piece only when it is needed

	We allocate memory on a run-time stack, or stack.
	We dynamically allocate memory in the heap.

	We initialize other things, particularly I/O

	start main()

A process is either running, ready, or blocked.
A scheduler chooses.

A register context keeps track of stuff inside a process after it stopped during a context switch.

A process control block/process list is a data structure that keeps track of processes.