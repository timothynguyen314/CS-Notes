PROCESS API

fork()
	creates a new process that is nearly identical to the calling process.
	The child starts running from where it is called. It has its own address space, stack, PC.

	fork() returns the PID of child for the parent. For the child, it returns 0.

	The behavior of fork() is not deterministic. We don't know if the child or parent is running at any point.

wait()
	parent waits for child to finish before resuming.
	waitpid() is more specific, waiting for a specific PID
	this makes the behavior of fork() deterministic.

exec()
	run a program different from teh calling program.
	this re-initializes the stack and heap.

The shell gives you a prompt.
You type a command.
fork() finds a command, while the parent process continues displaying, and the child calls exec()

pipe()
	input of one process goes into the pipe
	output goes into another process.