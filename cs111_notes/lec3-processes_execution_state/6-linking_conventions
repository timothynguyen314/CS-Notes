LINKAGE CONVENTIONS

Local variables are automatically allocated when a procedure is called. Stored in the stack.
They are only visible to their block.
They are deallocated when the procedure ends.

Long lived resources are stored in the heap.

Subroutine Linkage Conventions: ISA specific
	when calling subroutine...
	identify parameters
	save return address
	save register
	allocate space for called subroutine's local variables

	after finishing subroutine...
	store return value
	pop routine off stack
	restore registers
	go back to return address

Traps/Interrupts
	Procedure calls are initiated by software, expected.
	Traps/interrupts are initiated by the hardware, unexpected.

	A table held by the OS contains # corresponding to all possible interrupts and exceptions.
	CPU finds index of trap/interrupt, gets a new PC for the trap/interrupt, pushes the PC on a stack, continues at new PC.
		A "first level handler" gathers info about hardware, then chooses an appropriate second level handler
		When the second is done and returns back to the first, the first executes a priveleged return-from-T/I instruction
	Execution resumes as normal

Moving into kernel mode, or any new CPU mode, removes all CPU cache, and thus going back to original mode will be a lot slower.