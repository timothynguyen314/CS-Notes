THREADS, IPC, AND SYNCHRONIZATION

Threads vs Processes
	Processes are expensive, having their own resources and address space.
	Processes are usually unique from each other.

	Threads have their own stack, PC, registers, but share other resources such as the address space.
	Threads run within the same process.
	The maximum stack size is known when a thread is created.

	Frequent creation/destruction? threads
	Different priveleges? processes
	No protection necessary from each other? threads

Inter Process Communication (IPC)
	Supported through system calls. Requires action by both processes, and is controlled by OS at every step.

	Typical actions: read, write, channel content query (how much data is going through), connection extablishment and query (what are the endpoints, what is the status)

	Synchronous
		One process writes until the message is delivered.
		The other process reads until a message is available.
	Asynchronous
		One process writes to system, without knowing if it is delivered.
		The other process reads if a message is available, otherwise returns.

	Messages vs Streams
		Message - distinct packets sent as units (all-or-nothing)
		Stream - continuous stream of bytes, we can read or write few or many at a time

	Flow control
		Making sure a fast sender doesn't overwhelm a slow receiver.
		Queued messages are buffered in the OS until received, and we don't want this space to grow too big.
		This could be done by blocking the sender or flushing old messages, depending on network protocol.

	Questions
		When is data "delivered"? When it's queued? When it's been read? When the receiver explicitly acknowledges?
		What do we do when delivery fails? Retry? Try a different route between servers?
		Do channels survive receiver restarts?

Types of IPC
	Pipelines
		Data flows through a series of programs as a simple byte stream.
		Under control of a single user, so no security issues.

		Ex:
		ls | grep | sort | mail
		processor | compiler | assembler

	Sockets
		More complex than pipes.
		Connections between addresses/ports.
		More data options than just a stream.
		Complex flow control and error handling.

	Mailboxes and Named Pipes
		Compromise between pipes and sockets.
		A server awaits client connection, and once they connect, can be as simple as a pipe.
		Client/server must be on same system.

	Shared Memory
		Processes share read/write segments, that are mapped into multiple address spaces.
		OS is not involved in data transfers, only read/write via limited direct execution.
		Only works on a local machine.

Synchronization
	The benefits of parallelism - improved throughput, modularity (breaking a complex task into simple ones), robustnesss (failure of one does not affect others)

	Sequential processes are easy. Independent parallel processes are easy.
	Cooperating parallel processes need synchronization, or ensuring things happen in the right order. 

	Race Conditions - when something depends on execution order of processes/threads running in parallel.
	Non-Deterministic Execution - the execution order of processes/threads is different everytime.

	Critical Section Serialization
		A critical section is a resource shared by multiple threads, and correctness depends on execution order.

		Two threads add 1 to a sum.
		They both access the sum at the same time, and each add 1 to their own version.
		The sum is incremented by 1, not 2.

		We fix this by ensuring mutual exclusion.

		Interrupt Disables
			Block some/all interrupts, preventing other processes/threads from working.
			Can be dangerous if you block the wrong things. Delays important interrupts. Scheduled processes will be preempted and system/devices will be idle. So disable as few and briefly as possible.

			Not an option in user mode, using priveleged instructions.
			It's one instruction, cheaper than a system call.
			Interrupt disables cannot block the CPU. They are not a scheduled thread to run, and thus cannot do resource allocations or synchronization operations that might block the CPU.

			Use interrupt disables when there are shared resources that involve non-atomic updates (operations with multiple instructions)