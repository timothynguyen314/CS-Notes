Problem Solving As Search

Steps to Problem Solving
	"goal formulation" - Where do we want to end up?
	"problem formulation" - What are the actions and states we can take before reaching the goal?

Properties of Environment
	"observable" - can you know your current state?
	"discrete" - are there finite actions to choose from?
	"known" - do we know the states each action leads to?
	"deterministic" - does each action have only one outcome?

	With these four assumptions, we should be able to reach the goal state in a fixed number of actions, a "solution".
	
	The process of finding this sequence is called a "search".
	Once the solution is found, we can "execute".
	Thus the process is "formulate, search, execute".

	If the agent ignores its percepts while executing (going to next state without checking because it should already know beforehand), we call this an open-loop system.

Properties of a Problem
	"initial state"
	A list of "actions" that are available to the current state. Such actions are called "applicable" to s.
	A "transition model" that describes the states returned by each action--such states are called "successors".
		The initial state, actions, and transition model form the "state space", which is a graph of states.
	The "goal test" determines whether a given state is the goal state
	The "path cost" is the cost of getting to each state. There are "step costs" for each individual action.
		A solution goes from the initial to goal state and has a path cost. The optimal solution has lowest path cost.

Vacuum World Problem
	States:
		There are two locations. There can be dirt in 0, 1, or 2 locations. There can be a vacuum in either location. There are 8 such states.
	Initial State:
		Any state can be an initial state.
	Actions:
		The vacuum can either move left, move right, or suck.
	Transition Model:
		Sucking removes dirt from the square.
		You can't move from right from the right square, or left from the left square.
		You can't suck from a clean square.
	Goal Test:
		Are all squares clean?
	Path Cost:
		Each step costs 1, so the path cost is the number of steps.

8 Puzzle
	States:
	Initial State:
	Actions:
	Transition Model:
	Goal Test:
	Path Cost:

8 Queens
	States:
	Initial State:
	Actions:
	Transition Model:
	Goal Test:
	Path Cost:

	"incremental formulation" starts from an empty state and then augments the state description until reaching the goal state.
	"complete-state formulation" starts with all 8 queens then moves them around until reaching the goal state.

Loops in Search Trees
	Beware of loops as these are redundant paths.
	Maintain an "explored set"/"closed list" so that you remember the states you visited in the past so you can avoid loops.

	The set of leaf nodes available to you is the frontier--it separates explored and unexplored nodes.

Node
	Each node has the following components:

	State:
		The state a node belongs to.
	Parent:
		The node that led to this node.
	Action:
		The action that connects the parent to this node.
	Path-Cost:
		Cost of path from initial state to this node.

	Two different nodes can have the same state if they're on different paths.

	We can use a queue, a stack, or a priority queue as data structures for visiting nodes.